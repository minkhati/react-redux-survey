const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

const User = mongoose.model('users'); // One arguments => fetch something out of mongoose
// Tow arguments => to load something into it

passport.serializeUser((user, done) => {
  done(null, user.id); // This is unique id generated by mongo not same as profile.id
});

passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    done(null, user);
  });
});

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback', // Relative URL
      proxy: true
    },
    async (accessToken, refreshToken, profile, done) => {
      // Mongodb query is async so use promise
      const exisitingUser = await User.findOne({ googleId: profile.id });
      if (exisitingUser) {
        // We already have a record with the given profileId
        return done(null, exisitingUser); // done(err, userRecord)
      }

      // We don't have a user record with this ID, make a new record
      const user = await new User({ googleId: profile.id }).save();
      done(null, user);
    }
  )
);
